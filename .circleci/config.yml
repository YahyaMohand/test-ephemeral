# version: 2.1

# parameters:
#   pr_number:
#     type: string
#     default: ${CIRCLE_PULL_REQUEST##*/}
#   pr_branch:
#     type: string
#     default: ${CIRCLE_BRANCH}


# executors:
#   python-executor:
#     docker:
#       - image: cimg/python:3.9

#   terraform-executor:
#     docker:
#       - image: hashicorp/terraform:1.7

#   node-executor:
#     docker:
#       - image: node:20

#   aws-cli-executor:
#     docker:
#       - image: amazon/aws-cli:2.13.0

# commands:
#   setup_ephemeral_repo:
#     description: "Clone the ephemeral Terraform repository"
#     steps:
#       - run:
#           name: "Ensure fresh ephemeral repo"
#           command: |
#             rm -rf ephemeral
#             git clone https://github.com/YahyaMohand/ephemeral.git
#       - run:
#           name: "ls Ephemeral Repo"
#           command: ls -la ephemeral/terraform

#   terraform_init:
#     description: "Initialize Terraform"
#     steps:
#       - setup_ephemeral_repo
#       - run:
#           name: "Terraform Init"
#           command: |
#             cd ephemeral/terraform/ephemeral
#             terraform init \
#               -backend-config="key=ephemeral-environments/pr-<< pipeline.parameters.pr_number >>/terraform.tfstate"

#   terraform_plan:
#     description: "Run Terraform Plan"
#     steps:
#       - run:
#           name: "Terraform Plan"
#           command: |
#             cd ephemeral/terraform/ephemeral
#             terraform plan \
#               -var-file="terraform.ephemeral.tfvars" \
#               -var="pr_number=<< pipeline.parameters.pr_number >>" \
#               -var="is_backend=true" \
#               -out=tfplan

#   terraform_apply:
#     description: "Run Terraform Apply"
#     steps:
#       - run:
#           name: "Terraform Apply"
#           command: |
#             cd ephemeral/terraform/ephemeral
#             terraform apply -auto-approve tfplan

#   terraform_destroy:
#     description: "Run Terraform Destroy"
#     steps:
#       - run:
#           name: "Terraform Destroy"
#           command: |
#             cd ephemeral/terraform/ephemeral
#             terraform destroy -auto-approve \
#               -var-file="terraform.ephemeral.tfvars" \
#               -var="pr_number=<< pipeline.parameters.pr_number >>" \
#               -var="is_backend=true"

#   setup_db_tools:
#     description: "Install AWS CLI, SSM, and PostgreSQL Client"
#     steps:
#       - run:
#           name: "Install Required Tools"
#           command: |
#             apt update && apt install -y curl unzip postgresql-client

#             # Install AWS CLI v2
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             ./aws/install
#             aws --version

#             # Install AWS Session Manager Plugin
#             curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
#             apt install -y ./session-manager-plugin.deb
#             session-manager-plugin --version

#             # Verify PostgreSQL Client
#             psql --version
#             npm install -g prisma
#             prisma -v

#   manage_schema:
#     description: "Manage Database Schema"
#     parameters:
#       action:
#         type: enum
#         enum: ["create", "drop"]
#         default: "create"
#     steps:
#       - setup_db_tools
#       - run:
#           name: "Setup AWS SSM Tunnel and Manage Schema"
#           command: |
#             INSTANCE_ID=$(aws ec2 describe-instances --region me-south-1 \
#                       --filters "Name=tag:Name,Values=digitalzone-testing-bastion" \
#                       --query "Reservations[*].Instances[*].InstanceId" \
#                       --output text)

#             DB_HOST=$(aws rds describe-db-clusters --region me-south-1 \
#                       --db-cluster-identifier digitalzone-testing-db \
#                       --query 'DBClusters[*].Endpoint' --output text)

#             START_SESSION=$(aws ssm start-session --region me-south-1 --target $INSTANCE_ID \
#               --document-name AWS-StartPortForwardingSessionToRemoteHost \
#               --parameters "{\"portNumber\":[\"5432\"],\"localPortNumber\":[\"5432\"],\"host\":[\"$DB_HOST\"]}" \
#               --query 'SessionId' --output text) &

#             sleep 10
            
#             SESSION_ID=$(aws ssm describe-sessions --region me-south-1 --state Active --filter "key=Target, value=$INSTANCE_ID" --query "Sessions[0].SessionId" --output text)
#             echo $SESSION_ID > /tmp/ssm_session_id

#             PR_NUMBER=$(basename << pipeline.parameters.pr_number >>)

#             if [ "<< parameters.action >>" = "create" ]; then
#               PGPASSWORD="$DB_PASSWORD" psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME \
#                 -c "CREATE SCHEMA IF NOT EXISTS pr_$PR_NUMBER;"
#             else
#               PGPASSWORD="$DB_PASSWORD" psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME \
#                 -c "DROP SCHEMA IF EXISTS pr_$PR_NUMBER CASCADE;"
#             fi

#       - run:
#           name: Terminate SSM Session
#           command: |
#             SESSION_ID=$(cat /tmp/ssm_session_id)
#             AWS_PAGER="" aws ssm terminate-session --session-id $SESSION_ID --region me-south-1

# jobs:
#   test:
#     executor: python-executor
#     steps:
#       - checkout
#       - run:
#           name: Run main.py
#           command: python main.py

#   plan:
#     executor: terraform-executor
#     steps:
#       - checkout
#       - setup_ephemeral_repo
#       - terraform_init
#       - terraform_plan
#       - persist_to_workspace:
#           root: ~/project/ephemeral/terraform
#           paths:
#             - ephemeral/.terraform
#             - ephemeral/tfplan
#             - ephemeral/*.tf
#             - ephemeral/*.tfvars

#   hold_for_schema_creation:
#     executor: terraform-executor
#     steps:
#       - run:
#           name: "Wait for Approval to Create Schema and Apply"
#           command: echo "Click Approve to proceed."

#   create_schema:
#     executor: node-executor
#     steps:
#       - manage_schema:
#           action: "create"

#   apply:
#     executor: terraform-executor
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/project/ephemeral
#       - terraform_init
#       - terraform_plan
#       - terraform_apply

#   hold_for_cleanup:
#     executor: terraform-executor
#     steps:
#       - run:
#           name: "Wait for Approval to Cleanup Schema and Destroy Terraform"
#           command: echo "Click Approve to proceed."

#   cleanup_schema:
#     executor: node-executor
#     steps:
#       - manage_schema:
#           action: "drop"

#   cleanup:
#     executor: terraform-executor
#     steps:
#       - checkout
#       - attach_workspace:
#           at: terraform
#       - terraform_init
#       - terraform_destroy

# workflows:
#   version: 2
#   test-pipeline:
#     jobs:
#       - test
#       - plan:
#           requires:
#             - test
#           context: aws-creds
#       - hold_for_schema_creation:
#           type: approval
#           requires:
#             - plan
#       - create_schema:
#           requires:
#             - hold_for_schema_creation
#           context: aws-creds
#       - apply:
#           requires:
#             - create_schema
#           context: aws-creds
#       - hold_for_cleanup:
#           type: approval
#           requires:
#             - apply
#       - cleanup_schema:
#           requires:
#             - hold_for_cleanup
#           context: aws-creds
#       - cleanup:
#           requires:
#             - cleanup_schema
#           context: aws-creds



version: 2.1

orbs:
  continuation: circleci/continuation@1
  circleci-cli: circleci/circleci-cli@0.1.9

executors:
  python-executor:
    docker:
      - image: cimg/python:3.9

jobs:
  prepare_workspace:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  unit_test:
    executor: python-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Unit Tests
          command: python main.py

  e2e_test:
    executor: python-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run E2E Tests
          command: python main.py

  hold_for_ephemeral_pipeline:
    executor: python-executor
    steps:
      - run:
          name: "Wait for Approval to Deploy Ephemeral Environment"
          command: echo "Click Approve to proceed."
          
  continue_ephemeral_pipeline:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: "Verify .circleci Directory Contents"
          command: ls -la .circleci
      - continuation/continue:
          configuration_path: ".circleci/ephemeral-config.yml"

workflows:
  version: 2
  backend-pipeline:
    jobs:
      - prepare_workspace
      - unit_test:
          requires:
            - prepare_workspace
      - e2e_test:
          requires:
            - prepare_workspace
      - hold_for_ephemeral_pipeline:
          type: approval
          requires:
            - unit_test
            - e2e_test
      - continue_ephemeral_pipeline:
          requires:
            - hold_for_ephemeral_pipeline
