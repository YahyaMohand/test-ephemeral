version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecs: circleci/aws-ecs@3.2
  aws-ecr: circleci/aws-ecr@9.1.0
  slack: circleci/slack@5.1.1


jobs:  
  prepare_workspace:
    docker:
      - image: cimg/node:22.3.0
    resource_class: large
    working_directory: ~/project
    parameters:
      github_token:
        type: env_var_name
        default: GITHUB_TOKEN
    steps:
      - checkout

      # Restore the pnpm cache
      - restore_cache:
          keys:
            - pnpm-store-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-store-


      # Install dependencies using pnpm
      - run:
          name: Install dependencies
          command: pnpm install --no-frozen-lockfile

      - run:
          name: Extract and Display Version from package.json
          command: |
            VERSION=$(jq -r .version package.json)
            echo "Extracted version: $VERSION"
            echo "export PACKAGE_VERSION=$VERSION" >> $BASH_ENV
      # List files in the current directory
      - run:
          name: List files in the current directory
          command: ls -la

      # Save pnpm cache
      - save_cache:
          key: pnpm-store-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
            - ~/project/node_modules

      # Generate Prisma client using pnpm
      - run:
          name: Generate Prisma client
          command: pnpm prisma generate

      # Run build using pnpm
      - run:
          name: Run build
          command: pnpm run build

      # Persist the workspace
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
  semantic_release:
    docker:
      - image: cimg/node:22.3.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: []  # This will use all SSH keys added to the project
      - attach_workspace:
          at: ~/project
      - run:
          name: Add GitHub to known hosts
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: Verify Git access
          command: |
            echo "Testing Git access..."
            ssh -T git@github.com || true
            git ls-remote --heads git@github.com:DigitalZoneApp/ticket-zone-backend.git
      - run:
          name: Run semantic-release
          command: |
            export GH_TOKEN=${GITHUB_TOKEN}
            echo "Running semantic-release..."
            pnpm dlx semantic-release 

  run_unit_tests:
    docker:
      - image: cimg/node:22.3.0
    resource_class: medium
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run unit tests
          command: |
            pnpm run test

  run_e2e_tests:
    docker:
      - image: cimg/node:18.16.0
        environment:
          DATABASE_URL: postgresql://user:password@localhost:5432/tz_database?schema=public
          NODE_OPTIONS: --max-old-space-size=3072
          TZ_CACHE_URL: redis://localhost:6379
      - image: cimg/postgres:15.2
        environment:
          POSTGRES_DB: tz_database
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      # - image: localstack/localstack
      - image: redis:6.2
        environment:
          REDIS_PORT: 6379
    resource_class: large
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y redis-tools python3-pip awscli
      - run:
          name: List files in the current directory
          command: ls -la
      - run:
          name: Prepare env_file
          command: |
            touch .env.test
            echo "TZ_APP_ENV=test" >> .env.test
            echo "DIGITAL_ZONE_DB_CONNECTION=postgresql://user:password@localhost:5432/tz_database?schema=public" >>  .env.test
            echo "TZ_AWS_REGION=$PROD_AWS_REGION" >> .env.test
            echo "TZ_AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID" >> .env.test
            echo "TZ_AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY" >> .env.test
            echo "AWS_DYNAMODB_ENDPOINT=http://localhost:4566" >> .env.test
            echo "AWS_DYNAMODB_REGION=us-east-1" >> .env.test
      - run:
          name: Run Prisma migration
          command: |
            pnpm prisma migrate deploy
      - run:
          name: Prepare localstack
          command: |
            sudo apt-get update && sudo apt-get install python3-pip awscli
      - run:
          name: Run e2e tests with open handle detection
          command: |
            pnpm run test:e2e

  build_app:
    executor: aws-ecr/default
    resource_class: medium
    working_directory: ~/project
    parameters:
      environment:
        type: string
        default: staging
      aws_access_key_id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws_secret_access_key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
      aws_region:
        type: env_var_name
        default: PROD_AWS_REGION
      aws_account_id:
        type: env_var_name
        default: PROD_AWS_ACCOUNT_ID
      push_image:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Set AWS Account ID to Lowercase
          command: |
            echo "Converting AWS Account ID to lowercase"
            export LOWERCASE_AWS_ACCOUNT_ID=$(echo "$PROD_AWS_ACCOUNT_ID" | tr '[:upper:]' '[:lower:]')
            echo "AWS Account ID in lowercase: $LOWERCASE_AWS_ACCOUNT_ID"
            echo "export LOWERCASE_AWS_ACCOUNT_ID=$LOWERCASE_AWS_ACCOUNT_ID" >> $BASH_ENV
      - run:
          name: Extract version from package.json
          command: |
            VERSION=$(jq -r '.version' package.json)
            echo "Extracted version: $VERSION"
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - aws-cli/setup:
          aws-access-key-id: << parameters.aws_access_key_id >>
          aws-secret-access-key: << parameters.aws_secret_access_key >>
          aws-region: << parameters.aws_region >>
      - aws-ecr/ecr_login:
          account_id: $LOWERCASE_AWS_ACCOUNT_ID
          profile_name: << parameters.environment >>
          region: ${<< parameters.aws_region >>}
      - aws-ecr/build_image:
          repo: 'digitalzone-<< parameters.environment >>-be-tz'
          tag: $VERSION
          region: ${<< parameters.aws_region >>}
          account_id: $LOWERCASE_AWS_ACCOUNT_ID
          push_image: << parameters.push_image >>

  deploy_to_ecs:
    executor: aws-cli/default
    resource_class: small
    working_directory: ~/project
    parameters:
      environment:
        type: string
        default: staging
      aws_access_key_id:
        type: env_var_name
        default: PROD_AWS_ACCESS_KEY_ID
      aws_secret_access_key:
        type: env_var_name
        default: PROD_AWS_SECRET_ACCESS_KEY
      aws_region:
        type: env_var_name
        default: PROD_AWS_REGION
      aws_account_id:
        type: env_var_name
        default: PROD_AWS_ACCOUNT_ID
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Set AWS Account ID to Lowercase
          command: |
            echo "Converting AWS Account ID to lowercase"
            export LOWERCASE_AWS_ACCOUNT_ID=$(echo "$PROD_AWS_ACCOUNT_ID" | tr '[:upper:]' '[:lower:]')
            echo "AWS Account ID in lowercase: $LOWERCASE_AWS_ACCOUNT_ID"
            echo "export LOWERCASE_AWS_ACCOUNT_ID=$LOWERCASE_AWS_ACCOUNT_ID" >> $BASH_ENV
      - run:
          name: Extract version from package.json
          command: |
            VERSION=$(jq -r '.version' package.json)
            echo "Extracted version: $VERSION"
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - aws-cli/setup:
          aws-access-key-id: << parameters.aws_access_key_id >>
          aws-secret-access-key: << parameters.aws_secret_access_key >>
          aws-region: << parameters.aws_region >>
      - aws-ecs/update-service:
          cluster: 'digitalzone-<< parameters.environment >>'
          service-name: 'be-tz'
          container-image-name-updates: 'container=app,image-and-tag=${<< parameters.aws_account_id >>}.dkr.ecr.${<< parameters.aws_region >>}.amazonaws.com/digitalzone-<< parameters.environment >>-be-tz:${VERSION}'
          family: 'digitalzone-<< parameters.environment >>-be-tz'
          verify-revision-is-deployed: true
      - aws-ecr/tag_image:
          repo: 'digitalzone-<< parameters.environment >>-be-tz'
          source_tag: $VERSION

workflows:
  any-branch-pre-checks:
    jobs:
      - prepare_workspace:
          name: prepare workspace
      - semantic_release:
          requires:
            - prepare workspace
      - run_unit_tests:
          name: run unit tests
          requires:
            - prepare workspace
      - run_e2e_tests:
          name: run e2e tests
          requires:
            - prepare workspace
